1 - > config  :
In this project, two main API URLs are configured: one for login and one for GraphQL data access. The login endpoint (/api/auth/signin) is used to authenticate the user using their username or email and password. When the login is successful, the server returns a JWT (JSON Web Token), which proves the user's identity. This token must be included in all future requests to the GraphQL API (/api/graphql-engine/v1/graphql) using the Authorization: Bearer <token> header. Without this token, the server will deny access and return an “Unauthorized” error. The token allows the GraphQL API to securely return only the data that belongs to the authenticated user.

2 - > query 1 :
This GraphQL query is designed to retrieve all the essential data needed to build a student’s profile page. It first fetches the user's basic information such as login, first name, last name, email, audit ratio, and audit counts. Then, it requests a filtered list of the user’s completed projects, specifically those marked as "finished", that include "module" in the project path but exclude any projects related to "piscine-js". This filtered project list is aliased as finished_projects and includes each project’s path and the usernames of collaborators. Finally, the query performs an aggregate calculation to sum the total XP the user has earned for a specific event (with eventId = 41) by filtering transactions of type "xp". The combined result gives a full overview of the student’s profile, academic progress, and collaboration, all in a single, optimized GraphQL query.

3 -> token  : 
The isTokenValid function checks whether a JWT (JSON Web Token) is still valid or has expired. It first ensures a token exists; if not, it returns false. Then, it splits the token using the dot . separator and extracts the middle part, which is the payload encoded in base64. Using atob(), it decodes this payload into a readable JSON string and then parses it to access the exp (expiration time) field. It compares this expiration timestamp to the current time (in seconds), and if the token is still valid (i.e., not expired), it returns true. If anything goes wrong during decoding or parsing, the function safely returns false. This helps the app know whether the user is still authenticated.

4 -> login :
The term Basic in the Authorization header refers to the Basic Authentication scheme, a simple and widely supported method for sending credentials over HTTP. When logging in, the client encodes the username and password in base64 and sends them with the header Authorization: Basic <encoded_credentials>. This allows the server to verify the user’s identity and, upon successful authentication, provide a JWT token. After this initial step, subsequent requests use the JWT token with a Bearer scheme instead of Basic Authentication, enhancing security by avoiding repeated transmission of the username and password.
